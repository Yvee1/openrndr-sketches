#version 450 core
// <primitive-types> (ShadeStyleGLSL.kt)
#define d_vertex_buffer 0
#define d_image 1
#define d_circle 2
#define d_rectangle 3
#define d_font_image_map 4
#define d_expansion 5
#define d_fast_line 6
#define d_mesh_line 7
#define d_point 8
#define d_custom 9
#define d_primitive d_vertex_buffer
// </primitive-types>

uniform float p_time; 
layout(origin_upper_left) in vec4 gl_FragCoord;

uniform sampler2D image;
// <drawer-uniforms(true, true)> (ShadeStyleGLSL.kt)
            
layout(shared) uniform ContextBlock {
    uniform mat4 u_modelNormalMatrix;
    uniform mat4 u_modelMatrix;
    uniform mat4 u_viewNormalMatrix;
    uniform mat4 u_viewMatrix;
    uniform mat4 u_projectionMatrix;
    uniform float u_contentScale;
    uniform vec2 u_viewDimensions;
};
            
layout(shared) uniform StyleBlock {
    uniform vec4 u_fill;
    uniform vec4 u_stroke;
    uniform float u_strokeWeight;
    uniform float[25] u_colorMatrix;
};
// </drawer-uniforms>
in vec3 va_position;
in vec3 va_normal;
in vec2 va_texCoord0;


// <transform-varying-in> (ShadeStyleGLSL.kt)
in vec3 v_worldNormal;
in vec3 v_viewNormal;
in vec3 v_worldPosition;
in vec3 v_viewPosition;
in vec4 v_clipPosition;
flat in mat4 v_modelNormalMatrix;
// </transform-varying-in>

out vec4 o_color;

            const float a=1.0;
            const float b=.1759;
            const float PI=3.14159265359;
            
//            float spiralSDF(vec2 p,vec2 c){
//                p = p - c;
//                float t=atan(p.y, p.x); //+ p_time*8.0;
//                float r=length(p.xy);
//                
//                float n=(log(r/a)/b-t)/(2.*PI);
//                float upper_r=a*exp(b*(t+2.*PI*ceil(n)));
//                float lower_r=a*exp(b*(t+2.*PI*floor(n)));
//                
//                return min(abs(upper_r-r),abs(r-lower_r));
//            }

            vec2 clog(vec2 z){
                return vec2(log(length(z)), atan(z.y, z.x));
            }

//            float spiralSDF(vec2 p){
//                float t = atan(p.y, p.x); //+ p_time*8.0;
//                float r = length(p.xy);
//                
//                
//                float n=(log(r/a)/b-t)/(2.*PI);
//                float upper_r=a*exp(b*(t+2.*PI*ceil(n)));
//                float lower_r=a*exp(b*(t+2.*PI*floor(n)));
//                
//                return min(abs(upper_r-r),abs(r-lower_r));
//            }
            
            float lineSDF(vec2 O, vec2 dir, vec2 P)
            {
                vec2 D = normalize(dir);
                vec2 X = O + D * dot(P-O, D);

                return distance(P, X);
            }
            
            float hAxis(vec2 p, float sw){
                return abs(p.y) - sw;
//                return 1.0;
            }
            
            float aastep(float threshold, float value) {
              #ifdef GL_OES_standard_derivatives
                float afwidth = clamp(length(vec2(dFdx(value), dFdy(value))) * 0.70710678118654757, 0.0, 0.5);
                return smoothstep(threshold-afwidth, threshold+afwidth, value);
              #else
                return step(threshold, value);
              #endif  
            }
            
            mat2 rotate2d(float _angle){
                return mat2(cos(_angle),-sin(_angle),
                            sin(_angle),cos(_angle));
            }
flat in int v_instance;

void main(void) {
        // -- fragmentConstants
    int c_instance = v_instance;
    int c_element = v_instance;
    vec2 c_screenPosition = gl_FragCoord.xy / u_contentScale;
    float c_contourPosition = 0.0;
    vec3 c_boundsPosition = vec3(0.0);
    vec3 c_boundsSize = vec3(0.0);
    vec4 x_fill = u_fill;
    vec4 x_stroke = u_stroke;
    {
       vec3 spherePos = vec3(va_position.x, va_position.y + 0.5, va_position.z);
vec2 complexPos = vec2(spherePos.x, spherePos.z) / (1 - spherePos.y);//            float intensity = aastep(0.01, spiralSDF(complexPos, vec2(0.0, 0.0)));
//            float intensity = spiralSDF(complexPos, vec2(0.0, 0.0));
//            complexPos *= 490.0;
            complexPos = clog(complexPos*1.0);
            complexPos = rotate2d(PI/2.3) * complexPos;
            
//            complexPos *= 50.0;
            float intensity;
//            intensity = aastep(0.05, lineSDF(vec2(0.0, 0.0), vec2(1.0, 1.0), vec2(complexPos.x, mod(complexPos.y, 2*PI))));
//            intensity = aastep(0.05, lineSDF(vec2(0.0, 0.0), vec2(1.0, 1.0), vec2(complexPos.x, complexPos.y)));
            intensity = aastep(0.0, hAxis(vec2(complexPos.x, -0.5 + mod(complexPos.y, p_fuck)), 0.01));
            vec3 color = vec3(intensity);
//            vec3 color = vec3(1.0);
//            color *= vec3(vec2(complexPos.x, mod(complexPos.y, 2*PI) / (2*PI)), 0.0);
            x_fill = vec4(color, 1.0);
            
    }
         o_color = x_fill;
    o_color.rgb *= o_color.a;

}