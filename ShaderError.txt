#version 450 core
// <primitive-types> (ShadeStyleGLSL.kt)
#define d_vertex_buffer 0
#define d_image 1
#define d_circle 2
#define d_rectangle 3
#define d_font_image_map 4
#define d_expansion 5
#define d_fast_line 6
#define d_mesh_line 7
#define d_point 8
#define d_custom 9
#define d_primitive d_vertex_buffer
// </primitive-types>

uniform float p_translation; 
uniform vec2 p_resolution; 
layout(origin_upper_left) in vec4 gl_FragCoord;

uniform sampler2D image;
// <drawer-uniforms(true, true)> (ShadeStyleGLSL.kt)
            
layout(shared) uniform ContextBlock {
    uniform mat4 u_modelNormalMatrix;
    uniform mat4 u_modelMatrix;
    uniform mat4 u_viewNormalMatrix;
    uniform mat4 u_viewMatrix;
    uniform mat4 u_projectionMatrix;
    uniform float u_contentScale;
    uniform vec2 u_viewDimensions;
};
            
layout(shared) uniform StyleBlock {
    uniform vec4 u_fill;
    uniform vec4 u_stroke;
    uniform float u_strokeWeight;
    uniform float[25] u_colorMatrix;
};
// </drawer-uniforms>
in vec3 va_position;
in vec3 va_normal;
in vec2 va_texCoord0;


// <transform-varying-in> (ShadeStyleGLSL.kt)
in vec3 v_worldNormal;
in vec3 v_viewNormal;
in vec3 v_worldPosition;
in vec3 v_viewPosition;
in vec4 v_clipPosition;
flat in mat4 v_modelNormalMatrix;
// </transform-varying-in>

out vec4 o_color;

float aastep(float threshold, float value) {
  #ifdef GL_OES_standard_derivatives
    float afwidth = clamp(length(vec2(dFdx(value), dFdy(value))) * 0.70710678118654757;
    return smoothstep(threshold-afwidth, threshold+afwidth, value);
  #else
    return step(threshold, value);
  #endif  
}
flat in int v_instance;

void main(void) {
        // -- fragmentConstants
    int c_instance = v_instance;
    int c_element = v_instance;
    vec2 c_screenPosition = gl_FragCoord.xy / u_contentScale;
    float c_contourPosition = 0.0;
    vec3 c_boundsPosition = vec3(0.0);
    vec3 c_boundsSize = vec3(0.0);
    vec4 x_fill = u_fill;
    vec4 x_stroke = u_stroke;
    {
                       vec2 complexPos = va_position.xz;
                vec3 color = vec3(0.0);
//                float margin = 0.005;
                color += vec3(1.0 - aastep(-0.75 + p_translation, complexPos.x));
                color += vec3(aastep(0.75 + p_translation, complexPos.x));
                color += vec3((1 - step(0.5, fract(complexPos.y))) * step(0.4, fract(complexPos.y)));
                
                x_fill = vec4(color, 1.0);
    }
         o_color = x_fill;
    o_color.rgb *= o_color.a;

}